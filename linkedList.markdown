# 链表
## 什么是链表
链表是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针。然而因为JS没有指针，所以只能用静态链表来实现链表。
![链表结构](/image/construction.png)
其中，data中保存着数据，next保存着下一个链表的引用。上图中，data2跟在data1后面，而不是data2是链表中的第二个元素。值得注意的是，链表的尾元素指向了null节点，表示链接结束的位置。

由于链表的起始点的确定比较麻烦，因此很多链表的实现都会在链表的最前面添加一个特殊的节点，称为**头节点**，表示链表的头部。进过改造，链表就成了如下的样子：
![头节点链表结构](/image/header-construction.png)

向链表中**插入一个节点**的效率很高，需要修改它前面的节点(前驱)，使其指向新加入的节点，而将新节点指向原来前驱节点指向的节点即可。
![插入节点](/image/insert-node.png)

同样，从链表中**删除一个节点**，也很简单。只需将待删节点的前驱节点指向待删节点的，同时将待删节点指向null，那么节点就删除成功了。
![删除节点](/image/delete-node.png)

### 链表的类型
#### 1. 单向链表
#### 2. 双向链表
通过给Node类增加一个previous属性，让其指向前驱节点的链接，这样就形成了双向链表。
![双向链表](/image/doubly-linked-list.png)
此时，向链表插入一个节点就要更改节点的前驱和后继了，但是删除节点的效率提高了，不再需要寻找待删除节点的前驱节点了。
#### 3. 循环链表
循环链表和单链表相似，节点类型都是一样，唯一的区别是，在创建循环链表的时候，让其头节点的 next 属性执行它本身。
![循环链表](/image/circular-linked-list.png)
这种行为会导致链表中每个节点的 next 属性都指向链表的头节点，换句话说，也就是链表的尾节点指向了头节点，形成了一个循环链表。
#### 4. 2+3是不是叫双向循环链表

## 链表与数组的区别
1. 数组分配的内存是连续的，但是链表分配的空间是非连续的。
2. 数组添加或删除，平均要移动一半的元素，但是链表只需要修改几个值。(空间换时间，但是感觉意义不大，因为JS本来就比较慢)
3. 数组是固定长度，链表长度是动态的。(但是对于JS而言，数组长度也是动态的)

## 什么情况下使用链表(链表是为了解决什么问题而发明的)
1. 解决动态数量的数据存储。
2. 刷题。(因为JS数组长度是动态的……)